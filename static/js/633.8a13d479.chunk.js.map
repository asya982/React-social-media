{"version":3,"file":"static/js/633.8a13d479.chunk.js","mappings":"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","sources":["webpack://social-media/./src/components/Dialogs/Dialog/Dialog.module.css?19be","components/Dialogs/Dialog/Dialog.jsx","webpack://social-media/./src/components/Dialogs/Dialogs.module.css?1b2e","webpack://social-media/./src/components/Dialogs/Message/Message.module.css?72d0","components/Dialogs/Message/Message.jsx","components/Dialogs/MessageForm.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx","hoc/withAuthRedirect.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialog\":\"Dialog_dialog__5HDuH\",\"active\":\"Dialog_active__RnDaX\"};","import React, { useEffect } from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport style from \"./Dialog.module.css\";\n\nconst Dialog = (props) => {\n\n  let {selectUser} = props;\n\n  useEffect(() => {\n    selectUser(props.location);\n  }, [props.location, selectUser]);\n\n  let isActive = (navData) => (navData.isActive ? style.active : null);\n  \n  return (\n    <div className={style.dialog}>\n      <img src={props.img} alt={props.name} className='avatar'/>\n      <NavLink to={\"/dialogs/\" + props.id} className={isActive}>\n        {props.name}\n      </NavLink>\n    </div>\n  );\n};\n\nexport default Dialog;\n","// extracted by mini-css-extract-plugin\nexport default {\"Dialogs\":\"Dialogs_Dialogs__nrSsY\",\"messages\":\"Dialogs_messages__Cg2l+\",\"sendMessage\":\"Dialogs_sendMessage__p+Z4w\",\"typing\":\"Dialogs_typing__Y25X6\"};","// extracted by mini-css-extract-plugin\nexport default {\"message\":\"Message_message__rjHQQ\"};","import React from \"react\";\nimport style from \"./Message.module.css\";\n\nconst Message = (props) => {\n  return (\n    <>\n      <div className={style.message} data-sentby={props.sentBy}>\n        <p>{props.sentBy}</p>\n        {props.message}\n      </div>\n    </>\n  );\n};\n\nexport default Message;\n","import React, { useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport style from './Dialogs.module.css';\n\nconst MessageForm = (props) => {\n    let { register, handleSubmit, reset } = useForm();\n  \n    useEffect(() => {\n      reset();\n    }, [props.location, reset]);\n  \n    let sendMessage = ({ messageText }) => {\n      if (messageText.trim()) {\n        props.sendMessage(messageText);\n        reset();\n      }\n    };\n    return (\n      <form onSubmit={handleSubmit(sendMessage)} className={style.sendMessage}>\n        <textarea\n          {...register(\"messageText\", {\n            onChange: props.isTyping,\n          })}\n        ></textarea>\n        <button>Send</button>\n      </form>\n    );\n  };\n\n  export default MessageForm;","import React, { useEffect, useState } from \"react\";\nimport Dialog from \"./Dialog/Dialog\";\nimport style from \"./Dialogs.module.css\";\nimport Message from \"./Message/Message\";\nimport MessageForm from \"./MessageForm\";\n\nconst Dialogs = (props) => {\n  let [typing, setTyping] = useState(false);\n  let [timerId, setTimerId] = useState(0);\n\n  useEffect(() => {\n    setTyping(false)\n  }, [props.messagesPage.location]);\n\n  let isTyping = () => {\n    clearTimeout(timerId);\n\n    setTyping(true);\n    setTimerId(setTimeout(() => setTyping(false), 1000));\n  };\n\n  let dialogElements = props.messagesPage.dialogsData.map((user) => (\n    <Dialog\n      {...user}\n      key={user.id}\n      location={props.router.params[\"*\"]}\n      selectUser={props.selectUser}\n    />\n  ));\n\n  let messageElements = props.messagesPage.location\n    ? props.messagesPage.messageData\n        .filter(\n          (messageArr, index) => index + 1 === +props.messagesPage.location,\n        )[0]\n        .map((messageData, index) => (\n          <Message\n            key={index}\n            message={messageData.message}\n            sentBy={messageData.sentBy}\n          />\n        ))\n    : null;\n\n  return (\n    <div className={style.Dialogs}>\n      <section className={style.dialog_items}>{dialogElements}</section>\n      <section className={style.messages}>\n        {messageElements}\n        {typing && <span className={style.typing}>typing...</span>}\n        <MessageForm\n          sendMessage={props.sendMessage}\n          location={props.messagesPage.location}\n          isTyping={isTyping}\n        />\n      </section>\n    </div>\n  );\n};\n\nexport default Dialogs;\n","import { connect } from \"react-redux\";\nimport { compose } from \"redux\";\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect\";\nimport { withRouter } from \"../../hoc/withRouter\";\nimport { selectUser, sendMessage } from \"../../redux/messagesReducer\";\nimport Dialogs from \"./Dialogs\";\n\nlet mapStateToProps = (state) => {\n  return {\n    messagesPage: state.messagesPage\n  };\n};\n\nexport default compose(\n  withRouter,\n  connect(mapStateToProps, { selectUser, sendMessage }),\n  withAuthRedirect,\n)(Dialogs);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Navigate } from \"react-router-dom\";\n\nconst mapStateToPropsForRedirect = (state) => ({\n    isAuth: state.auth.isAuth,\n});\n\nexport const withAuthRedirect = (Component) => {\n    class RedirectComponent extends React.Component {\n        render() {\n            if (!this.props.isAuth) {\n                return <Navigate to=\"/login\" />;\n            }\n            return <Component {...this.props} />;\n        }\n    }\n\n    let ConnectedRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent);\n\n    return ConnectedRedirectComponent;\n};"],"names":["props","selectUser","useEffect","location","className","style","src","img","alt","name","to","id","navData","isActive","sentBy","message","useForm","register","handleSubmit","reset","onSubmit","messageText","trim","sendMessage","onChange","isTyping","useState","typing","setTyping","timerId","setTimerId","messagesPage","dialogElements","dialogsData","map","user","key","router","params","messageElements","messageData","filter","messageArr","index","clearTimeout","setTimeout","compose","withRouter","connect","state","withAuthRedirect","Dialogs","mapStateToPropsForRedirect","isAuth","auth","Component","RedirectComponent","this","React"],"sourceRoot":""}